name: Pico Firmware Build

on:
  workflow_call:
    inputs:
      name:
        required: true
        type: string
      rename:
        required: true
        type: string
      ext:
        required: true
        type: string
    secrets: {}

jobs:
  build-and-upload:
    runs-on: ubuntu-latest
    env:
      NAME: ${{ inputs.name }}
      RENAME: ${{ inputs.rename }}
      EXT:: ${{ inputs.ext }}
      #HASH: ${{ github.sha }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set short commit hash
        run: |
          echo "HASH=${GITHUB_SHA::7}" >> $GITHUB_ENV
          echo "Short hash is: ${GITHUB_SHA::7}"

      - name: Istall dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
          build-essential \
          gcc-arm-none-eabi \
          libnewlib-arm-none-eabi \
          libstdc++-arm-none-eabi-newlib

      - name: Fetch pico-sdk
        run: |
          git clone https:://github.com/raspberrypi/pico-sdk.git
          cd pico-sdk
          git checkout 2.1.1
          git submodule update --init
          echo "PICO_SDK_PATH=$GITHUB_WORKSPACE/pico-sdk" >> $GITHUB_ENV

      - name: Configure CMake
        working-directory: ${{ env.NAME }}
        run: cmake -B build -G Ninja -DPICO_SDK_PATH=$PICO_SDK_PATH

      - name: Build Project
        working-directory: ${{ env.NAME }}
        run: cmake --build build

      - name: Prepare firmware files for end user
        working-directory: ${{ env.NAME }}
        run: |
          mkdir -p artifacts/user/${RENAME}-firmware-${HASH}
          for ext in $EXT; do
            find bin -type f -name "${NAME}.$ext" -exec cp {} artifacts/user/${RENAME}-firmware-${HASH}

      - name: Prepare developer files
        working-directory: ${{ env.NAME }}
        run: |
          mkdir -p artifacts/dev/${RENAME}-developer-files-${HASH}
          cp -r bin/* artifacts/dev/${RENAME}-developer-files-${HASH}

      - name: Upload end user firmware as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.RENAME }}-firmware-${HASH}
          path: "${{ env.NAME }}/artifacts/user"

      - name: Upload developer files as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.RENAME }}-developer-files--${HASH}
          path: "${{ env.NAME }}/artifacts/dev"
